/*!
 * Apollo - Actor Ref
 * Copyright (c) 2012 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/*!
 * Internal Dependancies
 */

/*!
 * Primary export
 */

module.exports = Ref;

function Ref (parent, name) {
  /*!
   * @param {Ref} parent
   * @param {String} name
   */

  // return path
  Object.defineProperty(this, 'path', {
      get: function () {
        // TODO: better normalization
        return parent && parent.path !== '/'
          ? parent.path + '/' + name
          : '/' + name;
      }
    , enumerable: true
  });

  // return name
  Object.defineProperty(this, 'name', {
      get: function () {
        return name;
      }
    , enumerable: true
  });
}

/**
 * ### .serialize ()
 *
 * Turn this ref in a JSON object that can be
 * transmitted over the wire.
 *
 * @name serialize
 * @api public
 */

Ref.prototype.serialize = function () {
  return {
      name: this.name
    , path: this.path
  };
};

/**
 * ### .equal (ref)
 *
 * Compare self with another ref to determine
 * if they are the same.
 *
 * An example purpose is to ensure that
 * a message's sender is the parent of
 * the current actor.
 *
 * ```js
 * // from inside a `receive` method
 * var parent = this.ctx.parent
 *   , sender = msg.sender;
 *
 * if (!sender.equal(parent)) return done();
 *
 * // continue as usual
 * ```
 *
 * @param {Ref} ref to compare
 * @return {Boolean} sameness
 * @name equal
 * @api public
 */

Ref.prototype.equal = function (ref) {
  if (!(ref instanceof Ref)) return false;

  var myName = this.name
    , myPath = this.path
    , testName = ref.name
    , testPath = ref.path;

  if (testName !== myName) return false;
  if (testPath !== myPath) return false;
  return true;
};
