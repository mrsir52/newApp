
var debug = require('sherlock')('apollo:dispatcher');

var message = require('./messages');

module.exports = Dispatcher;

function Dispatcher (registry) {
  this.registry = registry;
}

Dispatcher.prototype.dispatchTell = function (ref, json) {
  var path = ref.path
    , reg = this.registry.get(path)
    , sender = this.registry.get(json.sender.path)
    , recipient = this.registry.get(json.recipient.path)
    , mailbox = reg.mailbox;

  json.sender = sender.ref;
  json.recipient = recipient.ref;
  var msg = new message.tell.Message(json);

  debug('%s :: dispatch tell [%s]', ref.path, msg.event);
  mailbox.push(msg);
};

Dispatcher.prototype.dispatchAsk = function (ref, json, cb) {
  var path = ref.path
    , reg = this.registry.get(path)
    , sender = this.registry.get(json.sender.path)
    , mailbox = reg.mailbox;

  json.sender = sender.ref;
  var msg = new message.ask.Message(json);

  Object.defineProperty(msg, 'respond', {
    value: function () {
      this.done();
      cb.apply(null, arguments);
    }
  });

  debug('%s :: dispatch ask [%s]', ref.path, msg.event);
  mailbox.push(msg);
};
